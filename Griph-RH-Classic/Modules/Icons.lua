---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Griph.
--- DateTime: 01/06/2018 02:32
---
local Icons = {}
local HL = HeroLibEx;
local Cache = HeroCache;
local Unit = HL.Unit;
local Player = Unit.Player;
local Target = Unit.Target;
local Spell = HL.Spell;
local Item = HL.Item;

--INTERRUPTS---
local int_smart = true

--RUN ONCE
local runonce = 0

--
local currentSize = 40

--DB to VAR
GriphRH.config.Spells = {}


-- Create the dropdown, and configure its appearance
local dropDown = CreateFrame("FRAME", "IconDropDown", UIParent, "UIDropDownMenuTemplate")
dropDown:SetPoint("CENTER")
dropDown:Hide()
UIDropDownMenu_SetWidth(dropDown, 200)
UIDropDownMenu_SetText(dropDown, "Nothing")

-- Create and bind the initialization function to the dropdown menu
UIDropDownMenu_Initialize(dropDown, function(self, level, menuList)
    local info = UIDropDownMenu_CreateInfo()
    if (level or 1) == 1 then
        -- info.text, info.hasArrow = "Class Config", nil
        -- info.checked = false
        -- info.func = function(self)
        --     GriphRH.ClassConfig(GriphRH.playerClass)
        --     GriphRH.playSoundR("Interface\\Addons\\Griph-RH\\Media\\button.ogg")
        -- end
        -- UIDropDownMenu_AddButton(info)
        --
        if GriphRH.playerClass == 65 then
            info.text, info.hasArrow = "Pure DPS", nil
            info.checked = GriphRH.db.profile[65].dps
            info.func = function(self)
                if GriphRH.db.profile[65].dps then
                    GriphRH.db.profile[65].dps = false
                else
                    GriphRH.db.profile[65].dps = true
                end
            end
            UIDropDownMenu_AddButton(info)
        end
        --
        if GriphPvP ~= nil then
            info.text, info.hasArrow = "PVP: Smart Cleave", nil
            info.checked = GriphRH.CleaveON()
            info.func = function(self)
                GriphRH.CleaveToggle()
            end
            UIDropDownMenu_AddButton(info)
        end
        --
        info.text, info.hasArrow = "Cooldowns", nil
        info.checked = GriphRH.config.cooldown
        info.func = function(self)
            GriphRH.CDToggle()
        end
        UIDropDownMenu_AddButton(info)
        --
        info.text, info.hasArrow = "AoE", nil
        info.checked = GriphRH.AoEON()
        info.func = function(self)
            GriphRH.AoEToggle()
        end
        UIDropDownMenu_AddButton(info)
        --
        info.text, info.hasArrow = "Interrupts", nil
        info.checked = GriphRH.InterruptsON()
        info.func = function(self)
            GriphRH.InterruptToggle()
        end
        UIDropDownMenu_AddButton(info)
        --
        if GriphRH.config.Spells ~= nil and #GriphRH.config.Spells > 0 then
            info.text, info.hasArrow, info.menuList = "Spells", true, "Spells"
            info.checked = false
            info.func = function(self)
                if SkillFramesArray[1]:IsVisible() then
                    for i = 1, #SkillFramesArray do
                        SkillFramesArray[i]:Hide()
                    end
                else
                    for i = 1, #SkillFramesArray do
                        SkillFramesArray[i]:Show()
                    end
                end

            end
            UIDropDownMenu_AddButton(info)
        end
    elseif menuList == "Spells" then
        --SKILL 1
        for i = 1, #GriphRH.config.Spells do
            info.text = GetSpellInfo(GriphRH.config.Spells[i].spellID)
            info.checked = GriphRH.config.Spells[i].isActive
            info.func = function(self)
                GriphRH.playSoundR(891);
                if GriphRH.config.Spells[i].isActive then
                    GriphRH.config.Spells[i].isActive = false
                else
                    GriphRH.config.Spells[i].isActive = true
                end
                print("|cFF69CCF0" .. GetSpellInfo(GriphRH.config.Spells[i].spellID) .. "|r: |cFF00FF00" .. tostring(GriphRH.config.Spells[i].isActive))
            end
            UIDropDownMenu_AddButton(info, level)
        end
        -- Show the "Games" sub-menu
        --        for s in (tostring(GetSpellInfo(GriphRH.config.Spells1)) .. "; " .. tostring(GetSpellInfo(GriphRH.config.Spells2))):gmatch("[^;%s][^;]*") do
        --            info.text = s
        --            UIDropDownMenu_AddButton(info, level)
        --        end
    end
end)

local updateConfigFunc = function()
    if runonce == 0 then
        print("===================")
        print("|cFF69CCF0R Rotation Assist:")
        print("|cFF00FF96Right-Click on the Main")
        print("|cFF00FF96Icon to more options")
        print("|cFF00FF96ENABLE NAMEPLATES")
        print("===================")

        if GetCVar("nameplateShowEnemies") == 0 and GetCVar("nameplateShowAll") == 0 then
            SetCVar("nameplateShowEnemies", 1)
        end
        SetCVar("nameplateOtherBottomInset", 0.1)
        SetCVar("nameplateOtherTopInset", 0.08)

        local mainOption = GriphRH.db.profile.mainOption
        Icons.MainIcon = CreateFrame("Frame", nil, UIParent)
        -- Icons.MainIcon:SetBackdrop(nil)
        Icons.MainIcon:SetFrameStrata("BACKGROUND")
        Icons.MainIcon:SetSize(currentSize, 40)
        --Icons.MainIcon:SetPoint("CENTER", 0, -200)
        Icons.MainIcon:SetPoint(mainOption.align, mainOption.xCord, mainOption.yCord)
        Icons.MainIcon.texture = Icons.MainIcon:CreateTexture(nil, "BACKGROUND")
        Icons.MainIcon.texture:SetAllPoints(true)
        Icons.MainIcon.texture:SetColorTexture(0, 0, 0, 0)
        Icons.MainIcon:SetScale(1.0 / Icons.MainIcon.GetEffectiveScale(UIParent))
        --Icons.MainIcon:SetEffectiveScale(1)

        Icons.MainIcon:Show(1)
        Icons.MainIcon:SetMovable(true)
        Icons.MainIcon:EnableMouse(true)
        Icons.MainIcon:SetScript("OnMouseDown", function(self, button)
            if button == "LeftButton" and not self.isMoving then
                self:StartMoving();
                self.isMoving = true;
            end
        end)
        Icons.MainIcon:SetScript("OnMouseUp", function(self, button)
            if button == "LeftButton" and self.isMoving then
                self:StopMovingOrSizing();
                self.isMoving = false;
            end
        end)
        Icons.MainIcon:SetScript("OnHide", function(self)
            if (self.isMoving) then
                self:StopMovingOrSizing();
                self.isMoving = false;
            end
        end)

        local IconRotation = CreateFrame("Frame", "MainIconFrame", Icons.MainIcon)
        -- IconRotation:SetBackdrop(nil)
        IconRotation:SetFrameStrata("BACKGROUND")
        --IconRotation:SetSize(18, 18)
        IconRotation:SetSize(40, 40)
        --IconRotation:SetPoint("TOPLEFT", 19, 6)
        --IconRotation:SetPoint("TOPLEFT", 50, 6)
        IconRotation:SetPoint("LEFT", 0, 0)
        IconRotation.texture = IconRotation:CreateTexture(nil, "BACKGROUND")
        IconRotation.texture:SetAllPoints(true)
        IconRotation.texture:SetColorTexture(0, 0, 0, 1.0)
        IconRotation:SetMovable(true)
        IconRotation:EnableMouse(true)

        local IconRotationInfoText = IconRotation:CreateFontString("InfoText", "OVERLAY")
        IconRotationInfoText:SetFontObject(GameFontNormalSmall)
        IconRotationInfoText:SetJustifyH("LEFT") --
        IconRotationInfoText:SetPoint("CENTER", IconRotation, "CENTER", 0, 0)
        IconRotationInfoText:SetFont("Fonts\\FRIZQT__.TTF", 10, "THICKOUTLINE")
        IconRotationInfoText:SetShadowOffset(1, -1)
        IconRotationInfoText:SetTextColor(1, 0, 0, 0.9)

        local IconRotationCDText = IconRotation:CreateFontString("CDText", "OVERLAY")
        IconRotationCDText:SetFontObject(GameFontNormalSmall)
        IconRotationCDText:SetJustifyH("LEFT") --
        IconRotationCDText:SetPoint("CENTER", IconRotation, "CENTER", -9, -11.5)
        IconRotationCDText:SetFont("Fonts\\FRIZQT__.TTF", 9, "THICKOUTLINE")
        IconRotationCDText:SetShadowOffset(1, -1)
        IconRotationCDText:SetTextColor(1, 1, 1, 0.5)

        local IconRotationAoEText = IconRotation:CreateFontString("AoEText", "OVERLAY")
        IconRotationAoEText:SetFontObject(GameFontNormalSmall)
        IconRotationAoEText:SetJustifyH("RIGHT") --
        IconRotationAoEText:SetPoint("CENTER", IconRotation, "CENTER", 11, -7)
        IconRotationAoEText:SetFont("Fonts\\FRIZQT__.TTF", 6, "THICKOUTLINE")
        IconRotationAoEText:SetShadowOffset(1, -1)
        IconRotationAoEText:SetTextColor(1, 1, 1, 0.5)

        local IconRotationInterruptsText = IconRotation:CreateFontString("InterruptsText", "OVERLAY")
        IconRotationInterruptsText:SetFontObject(GameFontNormalSmall)
        IconRotationInterruptsText:SetJustifyH("RIGHT") --
        IconRotationInterruptsText:SetPoint("CENTER", IconRotation, "CENTER", 11, -14)
        IconRotationInterruptsText:SetFont("Fonts\\FRIZQT__.TTF", 6, "THICKOUTLINE")
        IconRotationInterruptsText:SetShadowOffset(1, -1)
        IconRotationInterruptsText:SetTextColor(1, 1, 1, 0.5)

        IconRotation:SetScript("OnMouseDown", function(self, button)
            if button == "MiddleButton" and GriphPvP ~= nil then
                GriphRH.PvPConfig()
            end

            if button == "LeftButton" and not Icons.MainIcon.isMoving and not GriphRH.db.profile.mainOption.mainIconLock then
                Icons.MainIcon:StartMoving();
                Icons.MainIcon.isMoving = true;
            end
        end)

        IconRotation:SetScript("OnMouseUp", function(self, button)
            if button == "RightButton" then
                ToggleDropDownMenu(1, nil, dropDown, "cursor", 3, -3)
            end

            if button == "LeftButton" and Icons.MainIcon.isMoving then
                local _, _, arg2, arg3, arg4 = Icons.MainIcon:GetPoint()
                mainOption.align = arg2
                mainOption.xCord = arg3
                mainOption.yCord = arg4
                Icons.MainIcon:StopMovingOrSizing();
                Icons.MainIcon.isMoving = false;
            end
        end)
        IconRotation:SetScript("OnHide", function(self)
            if (Icons.MainIcon.isMoving) then
                Icons.MainIcon:StopMovingOrSizing();
                Icons.MainIcon.isMoving = false;
            end
        end)
        runonce = 1
    end
end

local updateConfig = CreateFrame("frame")
updateConfig:SetScript("OnEvent", updateConfigFunc)
updateConfig:RegisterEvent("PLAYER_LOGIN")
updateConfig:RegisterEvent("PLAYER_ENTERING_WORLD")


-- MainIcons
function GriphRH.tooltipShow(self)
    GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
    GameTooltip:SetText(self.tooltipText, nil, nil, nil, nil, true)
    GameTooltip:Show()
end

function GriphRH.tooltipHide()
    GameTooltip_Hide()
end

-- if text is provided, sets up the button to show a tooltip when moused over. Otherwise, removes the tooltip.
function GriphRH.appendTooltip(self, text)
    if text then
        self.tooltipText = text
        self:SetScript("OnEnter", GriphRH.tooltipShow)
        self:SetScript("OnLeave", GriphRH.tooltipHide)
    else
        self:SetScript("OnEnter", nil)
        self:SetScript("OnLeave", nil)
    end
end

SkillFramesArray = {}
local function createIcon(loopVar, xOffset, description)
    Icons.MainIcon:SetSize(currentSize * 2, 40)

    if SkillFramesArray[loopVar] ~= nil then
        SkillFramesArray[loopVar].texture:SetTexture(GetSpellTexture(GriphRH.config.Spells[loopVar].spellID))
        GriphRH.appendTooltip(SkillFramesArray[loopVar], description)
        if GriphRH.config.Spells[loopVar].isActive then
            SkillFramesArray[loopVar]:SetAlpha(1.0)
        else
            SkillFramesArray[loopVar]:SetAlpha(0.2)
        end
    else
        local newIcon = CreateFrame("Frame", "SkillFrame" .. loopVar, Icons.MainIcon)
        table.insert(SkillFramesArray, newIcon)
        GriphRH.appendTooltip(SkillFramesArray[#SkillFramesArray], description)
        newIcon:Hide()
        newIcon:SetBackdrop(nil)
        newIcon:SetFrameStrata("BACKGROUND")
        --IconRotation:SetSize(18, 18)
        newIcon:SetSize(40, 40)
        --IconRotation:SetPoint("TOPLEFT", 19, 6)
        --IconRotation:SetPoint("TOPLEFT", 50, 6)
        newIcon:SetPoint("LEFT", xOffset, 0)
        newIcon.texture = newIcon:CreateTexture(nil, "BACKGROUND")
        newIcon.texture:SetAllPoints(true)
        newIcon.texture:SetColorTexture(0, 0, 0, 1.0)
        newIcon.texture:SetTexture(GetSpellTexture(GriphRH.config.Spells[loopVar].spellID))
        newIcon:EnableMouse(true)
        newIcon:SetMovable(true)
        if GriphRH.config.Spells[loopVar].isActive then
            newIcon:SetAlpha(1.0)
        else
            newIcon:SetAlpha(0.2)
        end
        newIcon:SetScript("OnMouseDown", function(self, button)
            if button == "LeftButton" and not Icons.MainIcon.isMoving then
                Icons.MainIcon:StartMoving();
                Icons.MainIcon.isMoving = true;
            end
        end)
        newIcon:SetScript("OnMouseUp", function(self, button)
            if button == "LeftButton" and Icons.MainIcon.isMoving then
                Icons.MainIcon:StopMovingOrSizing();
                Icons.MainIcon.isMoving = false;
            end
            if button == "RightButton" and not Icons.MainIcon.isMoving then
                GriphRH.playSoundR(891);
                if GriphRH.config.Spells[loopVar].isActive then
                    GriphRH.config.Spells[loopVar].isActive = false
                    newIcon:SetAlpha(0.2)
                else
                    GriphRH.config.Spells[loopVar].isActive = true
                    newIcon:SetAlpha(1.0)
                end
                print("|cFF69CCF0" .. GetSpellInfo(GriphRH.config.Spells[loopVar].spellID) .. "|r: |cFF00FF00" .. tostring(GriphRH.config.Spells[loopVar].isActive))
            end
        end)

        newIcon:SetScript("OnHide", function(self)
            if (Icons.MainIcon.isMoving) then
                Icons.MainIcon:StopMovingOrSizing();
                Icons.MainIcon.isMoving = false;
            end
        end)
    end
end

GriphRH.Listener:Add('Griph_Events', 'PLAYER_ENTERING_WORLD', function(...)
    if GriphRH.db == nil then
        return
    end

    if GriphRH.config.Spells == nil then
        return
    end
    for i = 1, #SkillFramesArray do
        SkillFramesArray[i]:Hide()
    end
    if #GriphRH.config.Spells ~= nil then
        for i = 1, #GriphRH.config.Spells do
            createIcon(i, 40 * (i), GriphRH.config.Spells[i].description)
        end
    end
end)

local singletargetSpell = nil
local passiveSpell = nil
local updateIcon = CreateFrame("Frame");

updateIcon:SetScript("OnUpdate", function(self, sinceLastUpdate)
    updateIcon:onUpdate(sinceLastUpdate);
end)

function updateIcon:onUpdate(sinceLastUpdate)
    self.sinceLastUpdate = (self.sinceLastUpdate or 0) + sinceLastUpdate;
    if (self.sinceLastUpdate >= 0.066) then
        if GriphRH.db.profile.mainOption.mainIcon then
            Icons.MainIcon:Show()
            Icons.MainIcon:SetAlpha(GriphRH.db.profile.mainOption.mainIconOpacity / 100)
            Icons.MainIcon:SetScale(GriphRH.db.profile.mainOption.mainIconScale / 100)

            if CDText ~= nil then
                CDText:SetText(GriphRH.ColorOnOff(GriphRH.config.cooldown) .. "CD")
                AoEText:SetText(GriphRH.ColorOnOff(GriphRH.useAoE) .. "AoE")
                InterruptsText:SetText(GriphRH.ColorOnOff(GriphRH.db.profile.mainOption.useInterrupts) .. "Kick")
            end
        else
            Icons.MainIcon:Hide()
            if CDText ~= nil then
                CDText:SetText(GriphRH.ColorOnOff(GriphRH.config.cooldown) .. "")
                AoEText:SetText(GriphRH.ColorOnOff(GriphRH.useAoE) .. "")
                InterruptsText:SetText(GriphRH.ColorOnOff(GriphRH.mainOption.useInterrupts) .. "")
            end
        end

        if GriphRH.db.profile.mainOption.burstCD and GriphRH.db.profile[GriphRH.playerClass].cooldown then
            if GetTime() - GriphRH.burstCDtimer >= 10 then
                GriphRH.CDToggle()
            end

        end

        if GriphRH.mainRotation() == "ERROR" then
            MainIconFrame.texture:SetTexture("Interface\\Addons\\Griph-RH\\Media\\nosupport.tga")
            return
        end

        local singleRotation = GriphRH.mainRotation("SingleTarget")
        MainIconFrame.texture:SetTexture(singleRotation)

        if GriphExtra then
            GriphRH.passiveIcon.texture:SetTexture(passiveRotation2)
            if passiveRotation == 0 then
                GriphRH.passiveIcon.texture:SetTexture(nil)
            elseif passiveRotation == 1 then
                GriphRH.passiveIcon.texture:SetTexture(passiveRotation2)
            else
                GriphRH.passiveIcon.texture:SetTexture(passiveRotation)
            end
            if singleRotation == 0 then
                --GriphRH.HideButtonGlow("All")
                GriphRH.stIcon.texture:SetTexture(nil)
            elseif singleRotation == 1 then
                GriphRH.stIcon.texture:SetTexture(singleRotation2)
            else
                GriphRH.stIcon.texture:SetTexture(singleRotation)
            end
        end
        self.sinceLastUpdate = 0;
    end
end

CinematicFrame:HookScript("OnShow", function(self, ...)
    MainIconFrame:Hide()
end)

CinematicFrame:HookScript("OnHide", function(self, ...)
    MainIconFrame:Show()
end)